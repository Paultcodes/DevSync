[{"C:\\Users\\tomca\\DevSync\\client\\src\\index.js":"1","C:\\Users\\tomca\\DevSync\\client\\src\\App.js":"2","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\HomePage\\HomePage.jsx":"3","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\GroupPage\\GroupPage.jsx":"4","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\CreateGroup\\CreateGroupPage.jsx":"5","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\SignupPage\\SignupPage.jsx":"6","C:\\Users\\tomca\\DevSync\\client\\src\\components\\Navbar\\Navbar.jsx":"7","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\MyGroups\\MyGroupsPage.jsx":"8","C:\\Users\\tomca\\DevSync\\client\\src\\components\\Navbar\\NavbarContent.js":"9","C:\\Users\\tomca\\DevSync\\client\\src\\components\\HomeCards\\CardContent.js":"10","C:\\Users\\tomca\\DevSync\\client\\src\\utils\\auth.js":"11","C:\\Users\\tomca\\DevSync\\client\\src\\utils\\mutations.js":"12","C:\\Users\\tomca\\DevSync\\client\\src\\utils\\queries.js":"13","C:\\Users\\tomca\\DevSync\\client\\src\\components\\HomeCards\\HomeCard.jsx":"14","C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupNavbar\\navbar.jsx":"15","C:\\Users\\tomca\\DevSync\\client\\src\\components\\buttons\\Buttons.jsx":"16","C:\\Users\\tomca\\DevSync\\client\\src\\components\\MemberSection\\MemberSection.jsx":"17","C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupSettings\\GroupSettings.jsx":"18","C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupChat\\GroupChat.jsx":"19","C:\\Users\\tomca\\DevSync\\client\\src\\components\\inputs\\Inputs.jsx":"20","C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskPage.jsx":"21","C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupNavbar\\style.js":"22","C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskManager.jsx":"23","C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskCard.jsx":"24","C:\\Users\\tomca\\DevSync\\client\\src\\components\\UserCards\\UseCard.jsx":"25","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\LoginPage\\LoginPage.jsx":"26"},{"size":200,"mtime":1677552270275,"results":"27","hashOfConfig":"28"},{"size":2033,"mtime":1677804472611,"results":"29","hashOfConfig":"28"},{"size":1157,"mtime":1677802738391,"results":"30","hashOfConfig":"28"},{"size":1148,"mtime":1677802738389,"results":"31","hashOfConfig":"28"},{"size":2799,"mtime":1677802738387,"results":"32","hashOfConfig":"28"},{"size":1886,"mtime":1677802738394,"results":"33","hashOfConfig":"28"},{"size":1814,"mtime":1677807254685,"results":"34","hashOfConfig":"28"},{"size":397,"mtime":1677802738393,"results":"35","hashOfConfig":"28"},{"size":407,"mtime":1677807350579,"results":"36","hashOfConfig":"28"},{"size":1035,"mtime":1677802738365,"results":"37","hashOfConfig":"28"},{"size":1046,"mtime":1677802738396,"results":"38","hashOfConfig":"28"},{"size":924,"mtime":1677807616539,"results":"39","hashOfConfig":"28"},{"size":232,"mtime":1677802738398,"results":"40","hashOfConfig":"28"},{"size":240,"mtime":1677802738367,"results":"41","hashOfConfig":"28"},{"size":2007,"mtime":1677802738361,"results":"42","hashOfConfig":"28"},{"size":2385,"mtime":1677802738379,"results":"43","hashOfConfig":"28"},{"size":283,"mtime":1677802738368,"results":"44","hashOfConfig":"28"},{"size":199,"mtime":1677802738363,"results":"45","hashOfConfig":"28"},{"size":2214,"mtime":1677802738359,"results":"46","hashOfConfig":"28"},{"size":1198,"mtime":1677802738380,"results":"47","hashOfConfig":"28"},{"size":454,"mtime":1677802738376,"results":"48","hashOfConfig":"28"},{"size":173,"mtime":1677802738362,"results":"49","hashOfConfig":"28"},{"size":1842,"mtime":1677802738374,"results":"50","hashOfConfig":"28"},{"size":461,"mtime":1677802738373,"results":"51","hashOfConfig":"28"},{"size":473,"mtime":1677802738377,"results":"52","hashOfConfig":"28"},{"size":1647,"mtime":1677807671384,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"jrcag9",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tomca\\DevSync\\client\\src\\index.js",[],["113","114"],"C:\\Users\\tomca\\DevSync\\client\\src\\App.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\pages\\HomePage\\HomePage.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\pages\\GroupPage\\GroupPage.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\pages\\CreateGroup\\CreateGroupPage.jsx",["115","116","117","118"],"import { useState } from 'react';\nimport { InputOne, InputTwo } from '../../components/inputs/Inputs';\nimport { ButtonOne } from '../../components/buttons/Buttons';\nimport HomeCard from '../../components/HomeCards/HomeCard';\nimport './creategroup.css';\n\nimport auth from '../../utils/auth';\n\nimport { useMutation } from '@apollo/client';\nimport { CREATE_GROUP } from '../../utils/mutations';\n\nconst CreateGroupPage = () => {\n  const [createGroup, { data, error }] = useMutation(CREATE_GROUP);\n  const [groupType, setGroupType] = useState('open');\n\n  const [groupForm, setGroupForm] = useState({\n    groupName: '',\n    type: 'open',\n  });\n\n  const handleRadioChange = (event) => {\n    setGroupType(event.target.value);\n\n    setGroupForm((prevState) => ({\n      ...prevState,\n      type: event.target.value,\n    }));\n  };\n\n  const handleChange = (e) => {\n    setGroupForm((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const token = auth.loggedIn() ? auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await createGroup({\n        variables: { ...groupForm },\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <form className=\"create-form\">\n      <h1>Create Your Group</h1>\n      <div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"groupType\"\n              value=\"open\"\n              checked={groupType === 'open'}\n              onChange={handleRadioChange}\n            />\n            Open Group\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"groupType\"\n              value=\"private\"\n              checked={groupType === 'private'}\n              onChange={handleRadioChange}\n            />\n            Private Group\n          </label>\n        </div>\n      </div>\n      <div className=\"create-group-input\">\n        <InputTwo\n          name=\"groupName\"\n          onChange={handleChange}\n          placeholder=\"Group name\"\n        />\n        <ButtonOne buttonName=\"Submit\" onClick={handleSubmit} />\n      </div>\n      <div className=\"card-section\">\n        <HomeCard\n          title=\"Group type\"\n          text=\"lorem asdfasjflkd asjdfk asjfk ask jdfaskdlf jaskld fjaskd fjaskld fjaskldd jf\"\n        />\n        <HomeCard\n          title=\"Test\"\n          text=\"lorem asdfasjflkd asjdfk asjfk ask jdfaskdlf jaskld fjaskd fjaskld fjaskldd jf\"\n        />\n        <HomeCard\n          title=\"Why?\"\n          text=\"lorem asdfasjflkd asjdfk asjfk ask jdfaskdlf jaskld fjaskd fjaskld fjaskldd jf\"\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default CreateGroupPage;\n","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\SignupPage\\SignupPage.jsx",["119","120","121","122"],"import { useMutation } from '@apollo/client';\nimport { useState } from 'react';\n\nimport './signup.css';\n\nimport { SIGNUP_USER } from '../../utils/mutations';\nimport { InputOne, InputTwo, InputThree } from '../../components/inputs/Inputs';\nimport { ButtonOne } from '../../components/buttons/Buttons';\n\nimport auth from '../../utils/auth';\n\nconst SignupPage = () => {\n  const [createUser, { data, error }] = useMutation(SIGNUP_USER);\n  const [formData, setFormData] = useState({\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(formData);\n\n    try {\n      const { data } = await createUser({\n        variables: { ...formData },\n      });\n      console.log(data.createUser);\n      auth.login(data.createUser.token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n    console.log(formData);\n  };\n  return (\n    <div className=\"signup-form\">\n      <h1>Sign Up!</h1>\n      <div className=\"signup-inputs\">\n      <InputTwo\n          onChange={handleChange}\n          name=\"firstName\"\n          placeholder=\"First name\"\n        />\n         <InputTwo\n          onChange={handleChange}\n          name=\"lastName\"\n          placeholder=\"Last name\"\n        />\n        <InputTwo\n          onChange={handleChange}\n          name=\"username\"\n          placeholder=\"Username\"\n        />\n        <InputTwo onChange={handleChange} name=\"email\" placeholder=\"Email\" />\n        <InputTwo\n        type='password'\n          onChange={handleChange}\n          name=\"password\"\n          placeholder=\"Password\"\n        />\n        <ButtonOne onClick={handleSubmit} buttonName=\"Submit\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SignupPage;\n","C:\\Users\\tomca\\DevSync\\client\\src\\components\\Navbar\\Navbar.jsx",["123"],"import './navbar.css';\n\nimport { useState } from 'react';\n\nimport auth from '../../utils/auth';\n\nimport { loggedInContent } from './NavbarContent';\n\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-brand\">\n        <a href=\"/\" className=\"navbar-logo\">\n          DevSync\n        </a>\n        <button className=\"navbar-toggle\" onClick={toggleMenu}>\n          {menuOpen ? '✕' : '☰'}\n        </button>\n      </div>\n      <ul className={`navbar-menu${menuOpen ? ' navbar-menu--open' : ''}`}>\n        <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"navbar-link\">\n            Home\n          </Link>\n        </li>\n        {auth.loggedIn() &&\n          loggedInContent.map(({ route, name }) => {\n            return (\n              <li className=\"navbar-item\">\n                <Link className=\"navbar-link\" to={route}>\n                  {name}\n                </Link>\n              </li>\n            );\n          })}\n\n        {auth.loggedIn() ? (\n          <li className=\"navbar-item\">\n            <a onClick={auth.logout} className=\"navbar-link\">\n              Logout\n            </a>\n          </li>\n        ) : (\n          <div style={{ textAlign: 'center' }}>\n            <li className=\"navbar-item\">\n              <a onClick={auth.logout} href=\"/login\" className=\"navbar-link\">\n                Login\n              </a>\n            </li>\n            <li className=\"navbar-item\">\n              <a onClick={auth.logout} href=\"/signup\" className=\"navbar-link\">\n                Sign up\n              </a>\n            </li>\n          </div>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","C:\\Users\\tomca\\DevSync\\client\\src\\pages\\MyGroups\\MyGroupsPage.jsx",["124"],"import { useQuery } from '@apollo/client';\n\nimport { GET_ME } from '../../utils/queries';\n\nconst MyGroupsPage = () => {\n  const { loading, data } = useQuery(GET_ME);\n  console.log(data)\n\n  const userData = data?.me.ownedGroups || [];\n\n  console.log(userData);\n  return <div>\n    {userData.map((data) => {\n        return <h1>{data.groupName}</h1>\n    })}\n  </div>;\n};\n\nexport default MyGroupsPage;\n","C:\\Users\\tomca\\DevSync\\client\\src\\components\\Navbar\\NavbarContent.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\HomeCards\\CardContent.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\utils\\auth.js",["125"],"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\tomca\\DevSync\\client\\src\\utils\\mutations.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\utils\\queries.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\HomeCards\\HomeCard.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupNavbar\\navbar.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\buttons\\Buttons.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\MemberSection\\MemberSection.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupSettings\\GroupSettings.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupChat\\GroupChat.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\inputs\\Inputs.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskPage.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\GroupNavbar\\style.js",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskManager.jsx",["126"],"import React, { useState } from 'react';\nimport './TaskManagerStyle.css';\nimport TaskCard from './TaskCard';\n\nconst TaskForm = ({ onSave }) => {\n  const [task, setTask] = useState({ assignee: '', description: '', type: '' });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setTask({ ...task, [name]: value });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSave(task);\n    setTask({ assignee: '', description: '', type: '' });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"task-form\">\n        <label className=\"task-form__label\">\n          Assignee:\n          <input\n            type=\"text\"\n            name=\"assignee\"\n            value={task.assignee}\n            onChange={handleInputChange}\n            className=\"task-form__input\"\n          />\n        </label>\n        <label className=\"task-form__label\">\n          Description:\n          <textarea\n            name=\"description\"\n            value={task.description}\n            onChange={handleInputChange}\n            className=\"task-form__input\"\n          />\n        </label>\n        <label className=\"task-form__label\">\n          Type:\n          <select\n            name=\"type\"\n            value={task.type}\n            onChange={handleInputChange}\n            className=\"task-form__input\"\n          >\n            <option value=\"\">Select a task type</option>\n            <option value=\"front-end\">Front-end</option>\n            <option value=\"back-end\">Back-end</option>\n            <option value=\"styling\">Styling</option>\n            <option value=\"database-work\">Database work</option>\n          </select>\n        </label>\n        <button type=\"submit\" className=\"task-form__button\">\n          Create Task\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskForm;\n","C:\\Users\\tomca\\DevSync\\client\\src\\components\\TaskManager\\TaskCard.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\components\\UserCards\\UseCard.jsx",[],"C:\\Users\\tomca\\DevSync\\client\\src\\pages\\LoginPage\\LoginPage.jsx",["127","128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":18},{"ruleId":"133","severity":1,"message":"137","line":13,"column":25,"nodeType":"135","messageId":"136","endLine":13,"endColumn":29},{"ruleId":"133","severity":1,"message":"138","line":13,"column":31,"nodeType":"135","messageId":"136","endLine":13,"endColumn":36},{"ruleId":"133","severity":1,"message":"137","line":47,"column":15,"nodeType":"135","messageId":"136","endLine":47,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":7,"column":10,"nodeType":"135","messageId":"136","endLine":7,"endColumn":18},{"ruleId":"133","severity":1,"message":"139","line":7,"column":30,"nodeType":"135","messageId":"136","endLine":7,"endColumn":40},{"ruleId":"133","severity":1,"message":"137","line":13,"column":24,"nodeType":"135","messageId":"136","endLine":13,"endColumn":28},{"ruleId":"133","severity":1,"message":"138","line":13,"column":30,"nodeType":"135","messageId":"136","endLine":13,"endColumn":35},{"ruleId":"140","severity":1,"message":"141","line":47,"column":13,"nodeType":"142","endLine":47,"endColumn":62},{"ruleId":"133","severity":1,"message":"143","line":6,"column":11,"nodeType":"135","messageId":"136","endLine":6,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":41,"column":1,"nodeType":"146","endLine":41,"endColumn":34},{"ruleId":"133","severity":1,"message":"147","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":16},{"ruleId":"133","severity":1,"message":"137","line":11,"column":25,"nodeType":"135","messageId":"136","endLine":11,"endColumn":29},{"ruleId":"133","severity":1,"message":"138","line":11,"column":31,"nodeType":"135","messageId":"136","endLine":11,"endColumn":36},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'InputOne' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'error' is assigned a value but never used.","'InputThree' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'loading' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'TaskCard' is defined but never used.","no-global-assign","no-unsafe-negation"]